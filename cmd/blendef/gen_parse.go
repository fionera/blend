package main

import (
	"fmt"
	"os"
	"sort"
	"strings"
	"text/template"

	"github.com/mewspring/blend"
	"github.com/mewspring/blend/block"
)

// genParse generates the block parser logic required to parse the provided
// blend file.
//
// The output is stored in "parse.go".
func genParse(b *blend.Blend, dna *block.DNA) (err error) {
	f, err := os.Create(fmt.Sprintf("v%d/parse.go", b.Hdr.Ver))
	if err != nil {
		return err
	}
	defer f.Close()

	// Create sorted list of type names.
	structs := make(map[string]bool)
	for _, st := range dna.Structs {
		structs[st.Type] = true
	}

	typeNames := make([]string, 0, len(structs))
	for typeName := range structs {
		typeNames = append(typeNames, typeName)
	}

	sort.Strings(typeNames)

	tpl, err := template.New("tpl").Funcs(map[string]any{
		"title": strings.Title,
	}).Parse(tpl)

	if err != nil {
		return err
	}

	type tplData struct {
		Version int
		Types   []string
	}

	return tpl.Execute(f, tplData{
		Version: b.Hdr.Ver,
		Types:   typeNames,
	})
}

const tpl = `// NOTE: this file has been automatically generated by blendef for Blender v{{ .Version }}.

package v{{ .Version }}

import (
	"encoding/binary"
	"io"

	. "github.com/mewspring/blend/block/generic"
)

// ParseStructure parses a structure from based on its name
func ParseStructure(r io.Reader, order binary.ByteOrder, ptrSize int, typ string, count uint32) (body any, err error) {
	switch typ {
    {{- range .Types }}
	case "{{ . | title }}":
		body, err = ReadT[{{ . | title }}](r, order, ptrSize, count)
    {{- end }}
	}
 
	if err != nil {
		return nil, err
	}
	
	return body, EnsureAllRead(r, typ)
}`
